services:
  postgres:
    image: postgres:16-alpine
    container_name: ai-tg-bot-db
    environment:
      POSTGRES_USER: ${DB_USER:-botuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-ai_tg_bot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-botuser} -d ${DB_NAME:-ai_tg_bot}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  bot:
    # Development mode (local build)
    build:
      context: ./backend/bot
      dockerfile: Dockerfile.dev

    # Production mode (use image from registry)
    # Uncomment the line below and comment out 'build' section above
    # image: cr.yandex/${YC_REGISTRY_ID}/ai-tg-bot:${BOT_VERSION:-latest}

    container_name: ai-tg-bot
    depends_on:
      postgres:
        condition: service_healthy

    # Volume mapping for persistent data
    volumes:
      - ./logs:/app/logs # Bot logs
      - ./backend/bot/.env.development:/app/.env.development:ro # Read-only config

    # Restart policy
    restart: unless-stopped

    # Environment variables
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Resource limits (optional, can be adjusted)
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1.0'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 128M

  aitgapi:
    # Development mode (local build)
    build:
      context: ./backend # Расширяем context до backend для доступа к bot/src
      dockerfile: api/Dockerfile

    # Production mode (use image from registry)
    # Uncomment the line below and comment out 'build' section above
    # image: cr.yandex/${YC_REGISTRY_ID}/ai-tg-api:${API_VERSION:-latest}

    container_name: ai-tg-bot-api
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_VERSION=v1
      - COLLECTOR_MODE=real
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-ai_tg_bot}
      - DB_USER=${DB_USER:-botuser}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_POOL_SIZE=5
      - DB_MAX_OVERFLOW=10
      - CACHE_TTL=60
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=["http://localhost:8081"]
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - ADMIN_REGISTRATION_TOKEN=${ADMIN_REGISTRATION_TOKEN}
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')",
        ]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  aitgfront:
    # Development mode (local build)
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8081
        - NEXT_PUBLIC_APP_URL=http://localhost:3000
        - NEXT_PUBLIC_API_USERNAME=${NEXT_PUBLIC_API_USERNAME:-}
        - NEXT_PUBLIC_API_PASSWORD=${NEXT_PUBLIC_API_PASSWORD:-}

    # Production mode (use image from registry)
    # Uncomment the line below and comment out 'build' section above
    # image: cr.yandex/${YC_REGISTRY_ID}/ai-tg-frontend:${FRONTEND_VERSION:-latest}

    container_name: ai-tg-bot-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8081
      - NEXT_PUBLIC_API_USERNAME=${NEXT_PUBLIC_API_USERNAME}
      - NEXT_PUBLIC_API_PASSWORD=${NEXT_PUBLIC_API_PASSWORD}
      - NODE_ENV=production
    depends_on:
      - aitgapi
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    # Development mode (local build with custom Dockerfile)
    build:
      context: ./.build/nginx
      dockerfile: Dockerfile

    # Production mode (use image from registry)
    # Uncomment the line below and comment out 'build' section above
    # image: cr.yandex/${YC_REGISTRY_ID}/ai-tg-nginx:${NGINX_VERSION:-latest}

    container_name: ai-tg-bot-nginx
    ports:
      - "8081:80"
    depends_on:
      - aitgapi
      - aitgfront
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
