name: CI - Frontend

on:
  workflow_dispatch:
  workflow_call: # –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç workflow –∏–∑ –¥—Ä—É–≥–∏—Ö workflows

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: concurrency —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è unified CI (ci.yml)
# Individual workflows –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ concurrency groups

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: ai-tg-frontend

jobs:
  frontend-quality:
    name: Frontend - Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Prepare environment
        working-directory: frontend
        run: |
          echo "üîß Setting up environment..."
          echo "NEXT_PUBLIC_API_URL=http://localhost:8081" > .env.local
          npx next telemetry disable

      - name: Run linter
        working-directory: frontend
        run: npm run lint

      - name: Check formatting
        working-directory: frontend
        run: npm run format:check

      - name: Run type checker
        working-directory: frontend
        run: npm run type-check

      - name: Run tests with coverage
        working-directory: frontend
        run: npm test -- --run --coverage --coverage.threshold.lines=80

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: frontend/coverage
          if-no-files-found: ignore

      - name: Build check
        working-directory: frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8081
          NEXT_PUBLIC_APP_URL: http://localhost:3000
        run: npm run build

  frontend-docker:
    name: Frontend - Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: frontend-quality
    # –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ push –≤ main (–Ω–µ –ø—Ä–∏ PR)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        id: version
        run: |
          VERSION=$(cat frontend/VERSION | tr -d '\n\r')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Building Frontend version: ${VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Yandex Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YA_CLOUD_REGISTRY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=AI Telegram Bot - Frontend Dashboard
            org.opencontainers.image.description=Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:8081
            NEXT_PUBLIC_APP_URL=http://localhost:3000

      - name: Image info
        run: |
          echo "‚úÖ Frontend Docker image published successfully!"
          echo ""
          echo "Images:"
          echo "  - ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          echo "  - ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Commit: ${{ github.sha }}"
