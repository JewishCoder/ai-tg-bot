name: CI - Bot

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/bot/**"
      - ".build/Dockerfile"
      - ".github/workflows/ci-bot.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/bot/**"
      - ".build/Dockerfile"
      - ".github/workflows/ci-bot.yml"
  workflow_dispatch:

# Автоматическая отмена устаревших сборок при новых коммитах
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: ai-tg-bot

jobs:
  bot-quality:
    name: Bot - Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: pip install uv

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-bot-${{ hashFiles('backend/bot/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-bot-

      - name: Install dependencies
        working-directory: backend/bot
        run: uv sync --all-extras

      - name: Check formatting
        working-directory: backend/bot
        run: uv run ruff format --check src/ tests/

      - name: Run linter
        working-directory: backend/bot
        run: uv run ruff check src/ tests/

      - name: Run type checker
        working-directory: backend/bot
        run: uv run mypy src/

      - name: Run tests with coverage
        working-directory: backend/bot
        run: uv run pytest tests/ --cov=src --cov-report=term --cov-report=xml --cov-fail-under=80

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bot-coverage
          path: backend/bot/coverage.xml

  bot-docker:
    name: Bot - Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: bot-quality
    # Публикуем только при push в main (не при PR)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        id: version
        run: |
          VERSION=$(cat backend/bot/VERSION | tr -d '\n\r')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Building Bot version: ${VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Yandex Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YA_CLOUD_REGISTRY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.build/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=AI Telegram Bot
            org.opencontainers.image.description=AI-powered Telegram bot with LLM integration
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image info
        run: |
          echo "✅ Bot Docker image published successfully!"
          echo ""
          echo "Images:"
          echo "  - ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          echo "  - ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Commit: ${{ github.sha }}"
