"""–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã —Ä–∞–∑–±–∏–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""

from src.utils.message_splitter import split_message


def test_split_short_message() -> None:
    """–¢–µ—Å—Ç: –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è."""
    text = "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    result = split_message(text)

    assert len(result) == 1
    assert result[0] == text


def test_split_long_message() -> None:
    """–¢–µ—Å—Ç: –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏."""
    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    text = "a" * 5000
    result = split_message(text)

    assert len(result) == 2
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ <= 4096
    for part in result:
        assert len(part) <= 4096

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    combined = "".join(result)
    assert len(combined) == 5000


def test_split_multiple_parts() -> None:
    """–¢–µ—Å—Ç: –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π."""
    text = "b" * 10000
    result = split_message(text)

    assert len(result) >= 3
    # –í—Å–µ —á–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <= 4096
    for part in result:
        assert len(part) <= 4096

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    combined = "".join(result)
    assert len(combined) == 10000


def test_split_custom_max_length() -> None:
    """–¢–µ—Å—Ç: —Ä–∞–∑–±–∏–≤–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º max_length."""
    text = "c" * 500
    result = split_message(text, max_length=200)

    assert len(result) >= 3
    for part in result:
        assert len(part) <= 200

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    combined = "".join(result)
    assert len(combined) == 500


def test_split_empty_string() -> None:
    """–¢–µ—Å—Ç: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞."""
    result = split_message("")

    assert len(result) == 1
    assert result[0] == ""


def test_split_exact_boundary() -> None:
    """–¢–µ—Å—Ç: —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–≤–Ω–æ max_length –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è."""
    text = "d" * 4096
    result = split_message(text)

    assert len(result) == 1
    assert result[0] == text


# Edge Cases Tests


def test_split_unicode_and_emoji() -> None:
    """–¢–µ—Å—Ç: —Ä–∞–∑–±–∏–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Unicode –∏ —ç–º–æ–¥–∑–∏."""
    # –°–æ–∑–¥–∞—ë–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ –∏ unicode
    text = "–ü—Ä–∏–≤–µ—Ç! üëã " * 500  # ~8000 —Å–∏–º–≤–æ–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏

    result = split_message(text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–±–∏–ª–æ—Å—å
    assert len(result) >= 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ <= 4096
    for part in result:
        assert len(part) <= 4096

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–º–æ–¥–∑–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    combined = "".join(result)
    assert "üëã" in combined
    assert "–ü—Ä–∏–≤–µ—Ç" in combined


def test_split_very_long_message_10k() -> None:
    """–¢–µ—Å—Ç: –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (>10k —Å–∏–º–≤–æ–ª–æ–≤)."""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π 15k —Å–∏–º–≤–æ–ª–æ–≤
    text = "–ê" * 15000

    result = split_message(text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–±–∏–ª–æ—Å—å –Ω–∞ 4+ —á–∞—Å—Ç–µ–π
    assert len(result) >= 4

    # –í—Å–µ —á–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <= 4096
    for part in result:
        assert len(part) <= 4096

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    combined = "".join(result)
    assert len(combined) == 15000


def test_split_newlines_and_paragraphs() -> None:
    """–¢–µ—Å—Ç: —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –∏ –∞–±–∑–∞—Ü–∞–º–∏."""
    # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç —Å –∞–±–∑–∞—Ü–∞–º–∏
    paragraphs = ["–ê–±–∑–∞—Ü " + str(i) + ". " + ("–¢–µ–∫—Å—Ç. " * 50) for i in range(50)]
    text = "\n\n".join(paragraphs)  # ~15k —Å–∏–º–≤–æ–ª–æ–≤

    result = split_message(text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–±–∏–ª–æ—Å—å
    assert len(result) >= 2

    # –í—Å–µ —á–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <= 4096
    for part in result:
        assert len(part) <= 4096

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–±–∑–∞—Ü—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    combined = "".join(result)
    assert "–ê–±–∑–∞—Ü 0" in combined
    assert "–ê–±–∑–∞—Ü 49" in combined


def test_split_whitespace_only() -> None:
    """–¢–µ—Å—Ç: —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤."""
    text = "   \n\n   \t\t   \n   "

    result = split_message(text)

    # –î–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–¥–Ω–∞ —á–∞—Å—Ç—å (–∫–æ—Ä–æ—Ç–∫–∞—è)
    assert len(result) == 1
    assert result[0] == text


def test_split_special_characters() -> None:
    """–¢–µ—Å—Ç: —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    # –¢–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
    text = "–ü—Ä–∏–≤–µ—Ç\\n\\t<script>alert('test')</script>\\r\\n\"\\'{}[]|!@#$%^&*()" * 100

    result = split_message(text, max_length=500)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–±–∏–ª–æ—Å—å
    assert len(result) >= 2

    # –í—Å–µ —á–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <= 500
    for part in result:
        assert len(part) <= 500

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    combined = "".join(result)
    assert "<script>" in combined
    assert "\\n" in combined
