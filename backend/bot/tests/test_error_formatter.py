"""–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫."""

from src.utils.error_formatter import get_error_message


def test_rate_limit_error() -> None:
    """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ rate limit."""
    error = "Rate limit exceeded for API calls"
    result = get_error_message(error)

    assert "–ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in result.lower()
    assert "‚è≥" in result


def test_timeout_error() -> None:
    """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ timeout."""
    error = "Request timeout after 30 seconds"
    result = get_error_message(error)

    assert "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" in result.lower()
    assert "‚è±Ô∏è" in result


def test_connection_error() -> None:
    """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ connection."""
    error = "Connection refused to API server"
    result = get_error_message(error)

    assert "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏" in result.lower()
    assert "üîå" in result


def test_unknown_error() -> None:
    """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏."""
    error = "Some random unknown error"
    result = get_error_message(error)

    # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    assert "–Ω–µ —É–¥–∞–ª–æ—Å—å" in result.lower() or "–æ—à–∏–±–∫–∞" in result.lower()
    assert "‚ùå" in result


def test_empty_error() -> None:
    """–¢–µ—Å—Ç: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—à–∏–±–∫–∏."""
    result = get_error_message("")

    # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    assert len(result) > 0
    assert "‚ùå" in result


def test_case_insensitive_matching() -> None:
    """–¢–µ—Å—Ç: –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞."""
    # Rate limit –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
    result1 = get_error_message("RATE LIMIT exceeded")
    result2 = get_error_message("rate limit exceeded")
    result3 = get_error_message("Rate Limit Exceeded")

    assert result1 == result2 == result3
    assert "‚è≥" in result1
