# ============================================================
# AI Telegram Bot - Configuration
# ============================================================

# ============================================================
# ОБЯЗАТЕЛЬНЫЕ ПАРАМЕТРЫ
# ============================================================

# Telegram Bot
TELEGRAM_TOKEN=your_bot_token_here

# OpenRouter LLM
OPENROUTER_API_KEY=your_api_key_here

# Database
# ВАЖНО: Используйте надежные пароли в production!
DB_PASSWORD=your_secure_password_here  # ОБЯЗАТЕЛЬНО измените перед запуском!

# ============================================================
# LLM КОНФИГУРАЦИЯ
# ============================================================

# OpenRouter API
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
OPENROUTER_MODEL=anthropic/claude-3.5-sonnet

# Fallback модель (опционально)
# Используется при недоступности основной модели (rate limit, ошибки)
# Рекомендуется бесплатная быстрая модель для снижения затрат
OPENROUTER_FALLBACK_MODEL=deepseek/deepseek-chat-v3.1:free

# System Prompt
SYSTEM_PROMPT=Ты полезный ассистент. Отвечай на вопросы пользователей четко и по делу.

# LLM Parameters
LLM_TEMPERATURE=0.7        # Температура модели (0.0 - 2.0)
LLM_MAX_TOKENS=1000        # Максимум токенов в ответе
MAX_HISTORY_MESSAGES=50    # Максимум сообщений в истории диалога

# Context Management
# Количество последних сообщений загружаемых для LLM контекста
# Меньше = быстрее, меньше токенов; Больше = больше контекста
MAX_CONTEXT_MESSAGES=20

# ============================================================
# RETRY И ERROR RECOVERY
# ============================================================

# Retry для LLM API вызовов
RETRY_ATTEMPTS=3           # Количество попыток retry
RETRY_DELAY=1.0            # Задержка между попытками (секунды)

# Error Recovery для save_history (Sprint S2)
# Exponential backoff для устойчивости к временным сбоям БД
SAVE_RETRY_ATTEMPTS=3      # Попытки retry для сохранения истории
SAVE_RETRY_DELAY=1.0       # Базовая задержка (секунды, экспоненциальный рост)

# ============================================================
# RATE LIMITING (Sprint S2)
# ============================================================

# Защита от spam и DDoS атак
RATE_LIMIT_ENABLED=True    # Включить rate limiting
RATE_LIMIT_REQUESTS=10     # Максимум запросов на период
RATE_LIMIT_PERIOD=60.0     # Период в секундах (60 = 10 запросов в минуту)

# ============================================================
# КЕШИРОВАНИЕ (Sprint S2)
# ============================================================

# TTL кеш для системных промптов
# Снижает нагрузку на БД при частых запросах
CACHE_TTL=300              # TTL кэша в секундах (300 = 5 минут)
CACHE_MAX_SIZE=1000        # Максимальное количество записей в кэше

# ============================================================
# DATABASE CONFIGURATION
# ============================================================

# PostgreSQL Connection
DB_HOST=postgres           # Для Docker: 'postgres'; для локального: 'localhost'
DB_PORT=5432               # Порт PostgreSQL
DB_NAME=ai_tg_bot          # Имя базы данных
DB_USER=botuser            # Пользователь БД

# SQLAlchemy
DB_ECHO=False              # True = логировать все SQL запросы (только для отладки!)

# ============================================================
# LOGGING
# ============================================================

# Log Level
LOG_LEVEL=INFO             # DEBUG, INFO, WARNING, ERROR

# Security: Log Sanitization (Sprint S2)
# False (рекомендуется для production) = скрывать содержимое сообщений в логах
# True (для development) = логировать полное содержимое сообщений
LOG_MESSAGE_CONTENT=False

# ============================================================
# DIRECTORIES
# ============================================================

# Пути для хранения данных
DATA_DIR=data              # Директория для пользовательских данных
LOGS_DIR=logs              # Директория для логов

# ============================================================
# NOTES
# ============================================================
# 
# Production рекомендации:
# 1. Используйте надежные пароли (DB_PASSWORD)
# 2. Не коммитьте .env файлы в git
# 3. Установите LOG_MESSAGE_CONTENT=False для безопасности
# 4. Используйте RATE_LIMIT_ENABLED=True
# 5. Настройте fallback модель для отказоустойчивости
# 6. DB_ECHO=False в production (иначе логи переполнятся SQL запросами)
#
# Development рекомендации:
# 1. DB_HOST=localhost (если PostgreSQL локально)
# 2. DB_ECHO=True (для отладки SQL запросов)
# 3. LOG_LEVEL=DEBUG (детальное логирование)
# 4. LOG_MESSAGE_CONTENT=True (видеть содержимое сообщений)
#
# Документация:
# - Полная документация: docs/vision.md
# - API Reference: docs/backend/bot/api/README.md
# - Fallback механизм: docs/FALLBACK.md
# - Roadmap: docs/roadmap.md
#
