"""–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint."""

import asyncio
import logging
import statistics
import time
from datetime import UTC, datetime
from typing import Any

import httpx

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


class LoadTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API."""

    def __init__(self, base_url: str = "http://localhost:8000") -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LoadTester.

        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL API —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.base_url = base_url
        self.results: list[float] = []

    async def make_request(self, period: str) -> tuple[int, float]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ API.

        Args:
            period: –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ('day', 'week', 'month')

        Returns:
            Tuple (status_code, response_time_seconds)
        """
        start = time.time()

        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(
                    f"{self.base_url}/api/v1/stats",
                    params={"period": period},
                    timeout=30.0,
                )
                elapsed = time.time() - start
                return response.status_code, elapsed
            except Exception as e:
                elapsed = time.time() - start
                logger.error(f"Request failed: {e}")
                return 0, elapsed

    async def run_concurrent_requests(
        self, period: str, num_requests: int
    ) -> list[tuple[int, float]]:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

        Args:
            period: –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            num_requests: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ (status_code, response_time) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        """
        tasks = [self.make_request(period) for _ in range(num_requests)]
        return await asyncio.gather(*tasks)

    async def run_load_test(
        self,
        period: str = "week",
        total_requests: int = 100,
        concurrent_users: int = 10,
    ) -> dict[str, Any]:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

        Args:
            period: –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_requests: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            concurrent_users: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.info(f"\n{'=' * 70}")
        logger.info(f"Starting load test: {total_requests} requests, {concurrent_users} concurrent")
        logger.info(f"Period: {period}")
        logger.info(f"Target: {self.base_url}/api/v1/stats")
        logger.info(f"{'=' * 70}\n")

        all_results: list[tuple[int, float]] = []
        batches = total_requests // concurrent_users

        test_start = time.time()

        for batch in range(batches):
            logger.info(f"Batch {batch + 1}/{batches} - {concurrent_users} concurrent requests")

            batch_results = await self.run_concurrent_requests(period, concurrent_users)
            all_results.extend(batch_results)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            successful = sum(1 for status, _ in batch_results if status == 200)
            avg_time = statistics.mean([t for _, t in batch_results])
            logger.info(
                f"  ‚úÖ {successful}/{concurrent_users} success, "
                f"avg time: {avg_time * 1000:.2f}ms"
            )

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(0.1)

        test_duration = time.time() - test_start

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        response_times = [t for _, t in all_results]
        successful_requests = sum(1 for status, _ in all_results if status == 200)
        failed_requests = len(all_results) - successful_requests

        return {
            "test_date": datetime.now(UTC).isoformat(),
            "period": period,
            "total_requests": len(all_results),
            "successful_requests": successful_requests,
            "failed_requests": failed_requests,
            "success_rate": (successful_requests / len(all_results)) * 100,
            "test_duration_seconds": test_duration,
            "requests_per_second": len(all_results) / test_duration,
            "response_times": {
                "min_ms": min(response_times) * 1000,
                "max_ms": max(response_times) * 1000,
                "mean_ms": statistics.mean(response_times) * 1000,
                "median_ms": statistics.median(response_times) * 1000,
                "p95_ms": self._percentile(response_times, 95) * 1000,
                "p99_ms": self._percentile(response_times, 99) * 1000,
            },
        }

    def _percentile(self, data: list[float], percentile: int) -> float:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å.

        Args:
            data: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
            percentile: –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å (0-100)

        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è
        """
        sorted_data = sorted(data)
        index = int(len(sorted_data) * (percentile / 100))
        return sorted_data[min(index, len(sorted_data) - 1)]

    def print_results(self, results: dict[str, Any]) -> None:
        """
        –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            results: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        logger.info(f"\n{'=' * 70}")
        logger.info("LOAD TEST RESULTS")
        logger.info(f"{'=' * 70}\n")

        logger.info(f"Test Date: {results['test_date']}")
        logger.info(f"Period: {results['period']}")
        logger.info(f"Duration: {results['test_duration_seconds']:.2f}s")
        logger.info("")

        logger.info("REQUEST SUMMARY:")
        logger.info(f"  Total Requests: {results['total_requests']}")
        logger.info(f"  Successful: {results['successful_requests']} ‚úÖ")
        logger.info(f"  Failed: {results['failed_requests']} ‚ùå")
        logger.info(f"  Success Rate: {results['success_rate']:.2f}%")
        logger.info(f"  Throughput: {results['requests_per_second']:.2f} req/s")
        logger.info("")

        rt = results["response_times"]
        logger.info("RESPONSE TIMES:")
        logger.info(f"  Min: {rt['min_ms']:.2f}ms")
        logger.info(f"  Max: {rt['max_ms']:.2f}ms")
        logger.info(f"  Mean: {rt['mean_ms']:.2f}ms")
        logger.info(f"  Median: {rt['median_ms']:.2f}ms")
        logger.info(f"  P95: {rt['p95_ms']:.2f}ms")
        logger.info(f"  P99: {rt['p99_ms']:.2f}ms")
        logger.info("")

        # Performance –æ—Ü–µ–Ω–∫–∞
        logger.info("PERFORMANCE ASSESSMENT:")
        if rt["p95_ms"] < 100:
            logger.info("  üåü EXCELLENT - P95 < 100ms")
        elif rt["p95_ms"] < 500:
            logger.info("  ‚úÖ GOOD - P95 < 500ms")
        elif rt["p95_ms"] < 1000:
            logger.info("  ‚ö†Ô∏è  ACCEPTABLE - P95 < 1s")
        else:
            logger.info("  ‚ùå POOR - P95 > 1s")

        if results["success_rate"] >= 99:
            logger.info("  üåü EXCELLENT - Success rate >= 99%")
        elif results["success_rate"] >= 95:
            logger.info("  ‚úÖ GOOD - Success rate >= 95%")
        else:
            logger.info("  ‚ùå POOR - Success rate < 95%")

        logger.info(f"\n{'=' * 70}\n")


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    import argparse

    parser = argparse.ArgumentParser(description="Load testing –¥–ª—è Stats API")
    parser.add_argument(
        "--url",
        type=str,
        default="http://localhost:8000",
        help="Base URL API —Å–µ—Ä–≤–µ—Ä–∞ (default: http://localhost:8000)",
    )
    parser.add_argument(
        "--period",
        type=str,
        default="week",
        choices=["day", "week", "month"],
        help="–ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (default: week)",
    )
    parser.add_argument(
        "--requests",
        type=int,
        default=100,
        help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (default: 100)",
    )
    parser.add_argument(
        "--concurrent",
        type=int,
        default=10,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (default: 10)",
    )

    args = parser.parse_args()

    tester = LoadTester(base_url=args.url)

    # –ü—Ä–æ–≥—Ä–µ–≤ (warmup)
    logger.info("Warming up API...")
    await tester.make_request(args.period)
    await asyncio.sleep(1)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    results = await tester.run_load_test(
        period=args.period,
        total_requests=args.requests,
        concurrent_users=args.concurrent,
    )

    tester.print_results(results)


if __name__ == "__main__":
    asyncio.run(main())
