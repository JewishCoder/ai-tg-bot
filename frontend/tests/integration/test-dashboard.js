const { chromium } = require('playwright');

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dashboard
 * 
 * –ó–∞–ø—É—Å–∫: node test-dashboard.js
 */

async function testDashboard() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Dashboard...\n');

    const browser = await chromium.launch({ headless: false, slowMo: 500 });
    const context = await browser.newContext();
    const page = await context.newPage();

    let testsPassed = 0;
    let testsFailed = 0;

    const test = async (name, fn) => {
        try {
            await fn();
            console.log(`‚úÖ ${name}`);
            testsPassed++;
        } catch (error) {
            console.log(`‚ùå ${name}`);
            console.log(`   –û—à–∏–±–∫–∞: ${error.message}\n`);
            testsFailed++;
        }
    };

    try {
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ dashboard
        await page.goto('http://localhost:3000/dashboard');
        await page.waitForLoadState('networkidle');

        console.log('üìä 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã\n');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await test('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å', async () => {
            await page.waitForSelector('h1:has-text("Dashboard")');
        });

        await test('Header –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', async () => {
            await page.waitForSelector('header');
            const header = await page.locator('header').textContent();
            if (!header.includes('AI Telegram Bot Dashboard')) {
                throw new Error('Header –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫');
            }
        });

        await test('3 Summary Cards –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è', async () => {
            const cards = await page.locator('[role="main"] > div > div:nth-child(2) > div').count();
            if (cards < 3) {
                throw new Error(`–ù–∞–π–¥–µ–Ω–æ ${cards} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤–º–µ—Å—Ç–æ 3`);
            }
        });

        await test('–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', async () => {
            await page.waitForSelector('text=–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
        });

        await test('Period Filter –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', async () => {
            await page.waitForSelector('button:has-text("–î–µ–Ω—å")');
            await page.waitForSelector('button:has-text("–ù–µ–¥–µ–ª—è")');
            await page.waitForSelector('button:has-text("–ú–µ—Å—è—Ü")');
        });

        console.log('\nüîÑ 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n');

        // –¢–µ—Å—Ç Sidebar
        await test('Sidebar —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è', async () => {
            const trigger = page.getByRole('button', { name: 'Toggle Sidebar' });
            await trigger.click();
            await page.waitForTimeout(300);
            await trigger.click();
            await page.waitForTimeout(300);
        });

        // –¢–µ—Å—Ç Period Filter
        await test('–§–∏–ª—å—Ç—Ä "–î–µ–Ω—å" —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
            await page.getByRole('button', { name: '–î–µ–Ω—å' }).click();
            await page.waitForTimeout(1000); // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            const dayButton = page.getByRole('button', { name: '–î–µ–Ω—å' });
            const classes = await dayButton.getAttribute('class');
            if (!classes || !classes.includes('bg-')) {
                throw new Error('–ö–Ω–æ–ø–∫–∞ "–î–µ–Ω—å" –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            }
        });

        await test('–§–∏–ª—å—Ç—Ä "–ù–µ–¥–µ–ª—è" —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
            await page.getByRole('button', { name: '–ù–µ–¥–µ–ª—è' }).click();
            await page.waitForTimeout(1000);
        });

        // –¢–µ—Å—Ç Collapsible Tables
        await test('–¢–∞–±–ª–∏—Ü–∞ "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏" —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è', async () => {
            const button = page.locator('button').filter({ hasText: /^$/ }).first();
            await button.click();
            await page.waitForTimeout(500);
            const table = await page.locator('table').first().isVisible();
            if (!table) {
                throw new Error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å');
            }
        });

        await test('–¢–∞–±–ª–∏—Ü–∞ "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è', async () => {
            const button = page.locator('button').filter({ hasText: /^$/ }).nth(1);
            await button.click();
            await page.waitForTimeout(500);
            const tables = await page.locator('table').count();
            if (tables < 2) {
                throw new Error(`–ù–∞–π–¥–µ–Ω–æ ${tables} —Ç–∞–±–ª–∏—Ü –≤–º–µ—Å—Ç–æ 2`);
            }
        });

        // –°–∫—Ä–∏–Ω—à–æ—Ç —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        await page.screenshot({ path: 'dashboard-light-auto.png', fullPage: true });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã: dashboard-light-auto.png\n');

        console.log('üåô 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã\n');

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É
        await test('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É', async () => {
            const themeToggle = page.getByRole('button', { name: 'Toggle theme' });
            await themeToggle.click();
            await page.waitForTimeout(500);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Å .dark –¥–æ–±–∞–≤–ª–µ–Ω –∫ html
            const htmlClass = await page.locator('html').getAttribute('class');
            if (!htmlClass || !htmlClass.includes('dark')) {
                throw new Error('–ö–ª–∞—Å—Å .dark –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ <html>');
            }
        });

        await test('–¢–µ–º–Ω—ã–π —Ñ–æ–Ω –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è', async () => {
            const bodyBg = await page.evaluate(() => {
                return window.getComputedStyle(document.body).backgroundColor;
            });

            // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å rgb(10, 10, 13) –∏–ª–∏ –±–ª–∏–∑–∫–∏–π
            if (bodyBg.includes('255, 255, 255') || bodyBg.includes('rgb(255')) {
                throw new Error(`–§–æ–Ω –≤—Å–µ –µ—â–µ –±–µ–ª—ã–π: ${bodyBg}`);
            }
            console.log(`   Background: ${bodyBg}`);
        });

        await test('–¢–µ–∫—Å—Ç –≤–∏–¥–µ–Ω –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ', async () => {
            const color = await page.evaluate(() => {
                return window.getComputedStyle(document.body).color;
            });

            // –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ –±–µ–ª–æ–º—É
            if (color.includes('rgb(0') || color.includes('10, 10')) {
                throw new Error(`–¢–µ–∫—Å—Ç —Ç–µ–º–Ω—ã–π –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ: ${color}`);
            }
            console.log(`   Text color: ${color}`);
        });

        // –°–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        await page.screenshot({ path: 'dashboard-dark-auto.png', fullPage: true });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã: dashboard-dark-auto.png\n');

        console.log('üîô 4. –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ\n');

        await test('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É', async () => {
            const themeToggle = page.getByRole('button', { name: 'Toggle theme' });
            await themeToggle.click();
            await page.waitForTimeout(500);

            const htmlClass = await page.locator('html').getAttribute('class');
            if (htmlClass && htmlClass.includes('dark')) {
                throw new Error('–ö–ª–∞—Å—Å .dark –Ω–µ —É–¥–∞–ª–µ–Ω –∏–∑ <html>');
            }
        });

    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        testsFailed++;
    } finally {
        await browser.close();
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '='.repeat(50));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(50));
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: ${testsPassed}`);
    console.log(`‚ùå –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testsFailed}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((testsPassed / (testsPassed + testsFailed)) * 100)}%`);
    console.log('='.repeat(50) + '\n');

    if (testsFailed === 0) {
        console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n');
    } else {
        console.log('‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ.\n');
    }

    process.exit(testsFailed > 0 ? 1 : 0);
}

testDashboard();

