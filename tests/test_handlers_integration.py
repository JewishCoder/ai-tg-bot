"""–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è handlers."""

from unittest.mock import AsyncMock

import pytest

from src.config import Config
from src.handlers.commands import (
    handle_help,
    handle_reset,
    handle_role,
    handle_start,
    handle_status,
)
from src.handlers.messages import handle_message
from src.llm_client import LLMAPIError


@pytest.mark.asyncio
async def test_handle_start_command(mock_message: AsyncMock) -> None:
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
    await handle_start(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args[0][0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    assert "–ü—Ä–∏–≤–µ—Ç" in call_args or "üëã" in call_args
    assert "/start" in call_args
    assert "/help" in call_args
    assert "/reset" in call_args


@pytest.mark.asyncio
async def test_handle_help_command(mock_message: AsyncMock) -> None:
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    await handle_help(mock_message)

    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args[0][0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    assert "/start" in call_args
    assert "/help" in call_args
    assert "/reset" in call_args
    assert "/role" in call_args
    assert "/status" in call_args


@pytest.mark.asyncio
async def test_handle_role_without_args(
    mock_message: AsyncMock, mock_bot: AsyncMock, mock_storage: AsyncMock, test_config: Config
) -> None:
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /role –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É."""
    mock_message.text = "/role"

    await handle_role(mock_message, mock_bot, mock_storage, test_config)

    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args[0][0]
    assert "‚ùå" in call_args or "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" in call_args


@pytest.mark.asyncio
async def test_handle_role_default(
    mock_message: AsyncMock, mock_bot: AsyncMock, mock_storage: AsyncMock, test_config: Config
) -> None:
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /role default –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ä–æ–ª–∏."""
    mock_message.text = "/role default"

    await handle_role(mock_message, mock_bot, mock_storage, test_config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω set_system_prompt —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    mock_storage.set_system_prompt.assert_called_once()
    args = mock_storage.set_system_prompt.call_args[0]
    assert args[1] == test_config.system_prompt

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args[0][0]
    assert "‚úÖ" in call_args or "—É—Å–ø–µ—à–Ω–æ" in call_args.lower()


@pytest.mark.asyncio
async def test_handle_role_custom(
    mock_message: AsyncMock, mock_bot: AsyncMock, mock_storage: AsyncMock, test_config: Config
) -> None:
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /role —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ."""
    custom_prompt = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
    mock_message.text = f"/role {custom_prompt}"

    await handle_role(mock_message, mock_bot, mock_storage, test_config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω set_system_prompt —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    mock_storage.set_system_prompt.assert_called_once()
    args = mock_storage.set_system_prompt.call_args[0]
    assert args[1] == custom_prompt

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args[0][0]
    assert "‚úÖ" in call_args or "—É—Å–ø–µ—à–Ω–æ" in call_args.lower()


@pytest.mark.asyncio
async def test_handle_status_command(
    mock_message: AsyncMock, mock_bot: AsyncMock, mock_storage: AsyncMock, test_config: Config
) -> None:
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /status –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    await handle_status(mock_message, mock_bot, mock_storage, test_config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–ª–æ–≥–µ
    mock_storage.get_dialog_info.assert_called_once_with(12345)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args[0][0]
    assert "–°—Ç–∞—Ç—É—Å" in call_args or "üìä" in call_args


@pytest.mark.asyncio
async def test_handle_reset_command(
    mock_message: AsyncMock, mock_bot: AsyncMock, mock_storage: AsyncMock, test_config: Config
) -> None:
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /reset –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é."""
    await handle_reset(mock_message, mock_bot, mock_storage, test_config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω get_system_prompt –∏ set_system_prompt
    mock_storage.get_system_prompt.assert_called_once()
    mock_storage.set_system_prompt.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args[0][0]
    assert "‚úÖ" in call_args or "–æ—á–∏—â–µ–Ω–∞" in call_args.lower()


@pytest.mark.asyncio
async def test_handle_message_full_cycle(
    mock_message: AsyncMock,
    mock_bot: AsyncMock,
    mock_llm_client: AsyncMock,
    mock_storage: AsyncMock,
    test_config: Config,
) -> None:
    """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # Setup
    mock_message.text = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
    mock_storage.load_history.return_value = []
    mock_storage.get_system_prompt.return_value = None
    mock_llm_client.generate_response.return_value = "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!"

    # Execute
    await handle_message(mock_message, mock_bot, mock_llm_client, mock_storage, test_config)

    # Assert
    mock_storage.load_history.assert_called_once_with(12345)
    mock_llm_client.generate_response.assert_called_once()
    mock_storage.save_history.assert_called_once()
    mock_message.answer.assert_called_once_with("–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!")


@pytest.mark.asyncio
async def test_handle_message_with_existing_history(
    mock_message: AsyncMock,
    mock_bot: AsyncMock,
    mock_llm_client: AsyncMock,
    mock_storage: AsyncMock,
    test_config: Config,
) -> None:
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π."""
    # Setup
    mock_message.text = "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä"
    existing_history = [
        {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫", "timestamp": "2024-01-01T00:00:00+00:00"},
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç", "timestamp": "2024-01-01T00:00:01+00:00"},
        {
            "role": "assistant",
            "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π",
            "timestamp": "2024-01-01T00:00:02+00:00",
        },
    ]
    mock_storage.load_history.return_value = existing_history
    mock_llm_client.generate_response.return_value = "–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!"

    # Execute
    await handle_message(mock_message, mock_bot, mock_llm_client, mock_storage, test_config)

    # Assert
    # –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    mock_storage.load_history.assert_called_once_with(12345)

    # LLM –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
    mock_llm_client.generate_response.assert_called_once()

    # –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –æ—Ç–≤–µ—Ç–æ–º
    # 3 —Å—Ç–∞—Ä—ã—Ö + 1 user + 1 assistant = 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Ç–æ–≥–µ
    mock_storage.save_history.assert_called_once()
    saved_history = mock_storage.save_history.call_args[0][1]
    assert len(saved_history) == 5
    # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ - user, –ø–æ—Å–ª–µ–¥–Ω–µ–µ - assistant
    assert saved_history[-2]["role"] == "user"
    assert saved_history[-2]["content"] == "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä"
    assert saved_history[-1]["role"] == "assistant"
    assert saved_history[-1]["content"] == "–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!"


@pytest.mark.asyncio
async def test_handle_message_llm_error(
    mock_message: AsyncMock,
    mock_bot: AsyncMock,
    mock_llm_client: AsyncMock,
    mock_storage: AsyncMock,
    test_config: Config,
) -> None:
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ LLM API."""
    # Setup
    mock_message.text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    mock_storage.load_history.return_value = []
    mock_storage.get_system_prompt.return_value = None
    mock_llm_client.generate_response.side_effect = LLMAPIError("Rate limit exceeded")

    # Execute
    await handle_message(mock_message, mock_bot, mock_llm_client, mock_storage, test_config)

    # Assert
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args[0][0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
    assert "‚è≥" in call_args or "–ª–∏–º–∏—Ç" in call_args.lower()


@pytest.mark.asyncio
async def test_handle_message_long_response(
    mock_message: AsyncMock,
    mock_bot: AsyncMock,
    mock_llm_client: AsyncMock,
    mock_storage: AsyncMock,
    test_config: Config,
) -> None:
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏)."""
    # Setup
    mock_message.text = "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–æ–≥–æ"
    mock_storage.load_history.return_value = []
    mock_storage.get_system_prompt.return_value = None
    # –°–æ–∑–¥–∞—ë–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç > 4096 —Å–∏–º–≤–æ–ª–æ–≤
    long_response = "a" * 5000
    mock_llm_client.generate_response.return_value = long_response

    # Execute
    await handle_message(mock_message, mock_bot, mock_llm_client, mock_storage, test_config)

    # Assert
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ answer (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π)
    assert mock_message.answer.call_count >= 2

    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏
    first_call = mock_message.answer.call_args_list[0][0][0]
    assert "–ß–∞—Å—Ç—å" in first_call or "üìÑ" in first_call


@pytest.mark.asyncio
async def test_handle_message_custom_system_prompt(
    mock_message: AsyncMock,
    mock_bot: AsyncMock,
    mock_llm_client: AsyncMock,
    mock_storage: AsyncMock,
    test_config: Config,
) -> None:
    """–¢–µ—Å—Ç: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    # Setup
    mock_message.text = "–¢–µ—Å—Ç"
    mock_storage.load_history.return_value = []
    custom_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Python"
    mock_storage.get_system_prompt.return_value = custom_prompt
    mock_llm_client.generate_response.return_value = "–û—Ç–≤–µ—Ç"

    # Execute
    await handle_message(mock_message, mock_bot, mock_llm_client, mock_storage, test_config)

    # Assert
    # LLM –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    call_args = mock_llm_client.generate_response.call_args
    messages = call_args.kwargs["messages"]
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å system —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    assert messages[0]["role"] == "system"
    assert messages[0]["content"] == custom_prompt


@pytest.mark.asyncio
async def test_handle_message_chat_action(
    mock_message: AsyncMock,
    mock_bot: AsyncMock,
    mock_llm_client: AsyncMock,
    mock_storage: AsyncMock,
    test_config: Config,
) -> None:
    """–¢–µ—Å—Ç: –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç chat action (typing) –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ."""
    # Setup
    mock_message.text = "–¢–µ—Å—Ç"
    mock_storage.load_history.return_value = []
    mock_storage.get_system_prompt.return_value = None
    mock_llm_client.generate_response.return_value = "–û—Ç–≤–µ—Ç"

    # Execute
    await handle_message(mock_message, mock_bot, mock_llm_client, mock_storage, test_config)

    # Assert
    # –î–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω send_chat_action
    mock_bot.send_chat_action.assert_called_once()
    call_kwargs = mock_bot.send_chat_action.call_args.kwargs
    assert call_kwargs["chat_id"] == mock_message.chat.id
