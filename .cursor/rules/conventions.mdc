---
alwaysApply: true
---

# Правила разработки для Code Ассистента

Полное техническое видение проекта: [@docs/vision.md](vision.md)

## Основные принципы

### KISS (Keep It Simple, Stupid)
- Простые решения вместо сложных
- Без преждевременной оптимизации
- Код должен быть понятен с первого взгляда
- Только необходимый функционал для MVP

### ООП и структура файлов
- **Один класс = один файл = одна ответственность**
- Плоская структура без глубокой вложенности
- Имена файлов соответствуют классам: `llm_client.py` → класс `LLMClient`
- Никаких "божественных объектов"

### Читаемость
- Говорящие имена переменных и функций
- Короткие функции (до 20-30 строк)
- Минимум вложенности

### Типизация
- Type hints обязательны для всех функций и методов
- Используем Pydantic для моделей данных и конфигурации

### Документирование
- Docstring для всех публичных методов и функций
- Описание параметров, возвращаемых значений и исключений

### Асинхронность
- Используем async/await для всех I/O операций
- Не блокируем event loop

### Логирование
- Логируем все ключевые события
- Уровни: DEBUG, INFO, WARNING, ERROR
- Используем встроенный модуль `logging`
- Не логируем секреты (токены, ключи)

## Технологический стек

### Обязательные библиотеки
- Python 3.11+
- aiogram 3.x (Telegram Bot API)
- openai (для OpenRouter API)
- pydantic (валидация)
- python-dotenv (конфигурация)

### Минимализм зависимостей
- Только необходимые библиотеки
- Используем встроенные модули где возможно (`logging`, `argparse`, `json`)
- Без "а вдруг пригодится"

## Работа с UV в Windows PowerShell

### ⚠️ Важно для Windows!

**Все команды обращенные к `uv` необходимо выполнять через полный путь:**

```powershell
& "$env:USERPROFILE\.local\bin\uv.exe"
```

### Почему так?
- В PowerShell команда `uv` может не распознаваться напрямую
- Полный путь через `$env:USERPROFILE` гарантирует работу
- Оператор `&` используется для вызова исполняемых файлов в PowerShell

### Примеры команд:

**Запуск бота:**
```powershell
& "$env:USERPROFILE\.local\bin\uv.exe" run python -m src.main --env-file .env.development
```

**Установка/синхронизация зависимостей:**
```powershell
& "$env:USERPROFILE\.local\bin\uv.exe" sync
```

**Добавление новой библиотеки:**
```powershell
& "$env:USERPROFILE\.local\bin\uv.exe" add <package-name>
```

**Запуск скриптов:**
```powershell
& "$env:USERPROFILE\.local\bin\uv.exe" run python test_script.py
```

**Проверка импортов:**
```powershell
& "$env:USERPROFILE\.local\bin\uv.exe" run python -c "from src.bot import Bot; print('OK')"
```

## Структура кода

### Компоненты (примеры из vision.md)
- `bot.py` → класс `Bot`
- `llm_client.py` → класс `LLMClient`
- `message_handler.py` → класс `MessageHandler`
- `storage.py` → класс `Storage`
- `config.py` → класс `Config`

### Организация
- Все исходники в `src/`
- Данные в `data/`
- Логи в `logs/`
- Документация в `docs/`

## Обработка ошибок

- Обрабатываем все исключения явно
- Используем retry механизм для внешних API
- Логируем полный контекст ошибок
- Возвращаем понятные сообщения пользователю

## Конфигурация

- Все настройки в `.env` файле
- Валидация через Pydantic
- Без секретов в коде и git
- Поддержка `--env-file` аргумента

## Что НЕ делать

- ❌ Оверинжиниринг и избыточная абстракция
- ❌ Классы с множественной ответственностью
- ❌ Глубокая вложенность директорий
- ❌ Синхронный код для I/O операций
- ❌ Неявная обработка ошибок
- ❌ Код без type hints
- ❌ Публичные методы без docstrings

## Примеры

### ✅ Правильно
```python
class LLMClient:
    """Клиент для работы с LLM через OpenRouter API."""
    
    async def generate_response(
        self, 
        messages: list[dict[str, str]], 
        user_id: int
    ) -> str:
        """
        Генерирует ответ LLM на основе истории сообщений.
        
        Args:
            messages: История диалога в формате OpenAI
            user_id: ID пользователя для логирования
            
        Returns:
            Текст ответа от LLM
            
        Raises:
            LLMAPIError: При ошибке API после всех retry попыток
        """
        # Реализация
```

### ❌ Неправильно
```python
class Bot:
    # Нет docstring, нет type hints, множественная ответственность
    def process(self, msg):
        # Обработка сообщения, работа с LLM, сохранение в Storage
        # всё в одном методе на 200 строк
```

## Для подробностей

Полное техническое описание архитектуры, компонентов, сценариев работы и конфигурации смотри в [@docs/vision.md](vision.md).

