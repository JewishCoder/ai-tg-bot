"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

import asyncio
import logging
from datetime import UTC, datetime

from aiogram import Bot
from aiogram.enums import ChatAction
from aiogram.types import Message

from src.config import Config
from src.llm_client import LLMAPIError, LLMClient
from src.storage import Storage
from src.utils.error_formatter import get_error_message
from src.utils.message_splitter import split_message

logger = logging.getLogger(__name__)


async def handle_message(
    message: Message,
    bot: Bot,
    llm_client: LLMClient,
    storage: Storage,
    config: Config,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ LLM –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
        storage: Storage –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    """
    if not message.text:
        return

    user_id = message.from_user.id if message.from_user else 0
    text_length = len(message.text)
    logger.info(f"User {user_id}: received message ({text_length} chars)")

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ LLM)
        history = await storage.load_recent_history(user_id, limit=config.max_context_messages)

        # 2. –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        if not history:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º default
            custom_prompt = await storage.get_system_prompt(user_id)
            system_prompt = custom_prompt if custom_prompt else config.system_prompt

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            history = [
                {
                    "role": "system",
                    "content": system_prompt,
                    "timestamp": datetime.now(UTC).isoformat(),
                }
            ]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ Storage –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not custom_prompt:
                await storage.set_system_prompt(user_id, system_prompt)

            logger.debug(
                f"User {user_id}: initialized new dialog with "
                f"{'custom' if custom_prompt else 'default'} system prompt"
            )

        # 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history.append(
            {
                "role": "user",
                "content": message.text,
                "timestamp": datetime.now(UTC).isoformat(),
            }
        )

        # 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        response = await llm_client.generate_response(messages=history, user_id=user_id)

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append(
            {
                "role": "assistant",
                "content": response,
                "timestamp": datetime.now(UTC).isoformat(),
            }
        )

        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        await storage.save_history(user_id, history)

        # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å —Ä–∞–∑–±–∏–≤–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        message_parts = split_message(response)

        if len(message_parts) == 1:
            # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            await message.answer(response)
            logger.debug(f"User {user_id}: response sent ({len(response)} chars)")
        else:
            # –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
            logger.info(
                f"User {user_id}: splitting long response into {len(message_parts)} parts "
                f"(total {len(response)} chars)"
            )

            for i, part in enumerate(message_parts, 1):
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏
                part_indicator = f"üìÑ –ß–∞—Å—Ç—å {i}/{len(message_parts)}\n\n"
                part_with_indicator = part_indicator + part

                await message.answer(part_with_indicator)

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                if i < len(message_parts):
                    await asyncio.sleep(0.5)

            logger.debug(f"User {user_id}: all {len(message_parts)} parts sent successfully")

    except LLMAPIError as e:
        logger.error(f"User {user_id}: LLM API error: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = get_error_message(str(e))
        await message.answer(error_message)

    except Exception as e:
        logger.error(f"User {user_id}: Unexpected error: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
