"""–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞."""

import asyncio
import logging
from datetime import datetime
from aiogram import Bot as AiogramBot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ChatAction

from src.config import Config
from src.llm_client import LLMClient, LLMAPIError
from src.storage import Storage

logger = logging.getLogger(__name__)


class Bot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞.
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é aiogram Bot –∏ Dispatcher
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    - –ó–∞–ø—É—Å–∫ polling
    """
    
    def __init__(self, config: Config) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.config = config
        self.bot = AiogramBot(token=config.telegram_token)
        self.dp = Dispatcher()
        self.llm_client = LLMClient(config)
        self.storage = Storage(config)
        self._register_handlers()
        logger.info("Bot initialized")
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.dp.message.register(self._handle_start, Command("start"))
        self.dp.message.register(self._handle_help, Command("help"))
        self.dp.message.register(self._handle_role, Command("role"))
        self.dp.message.register(self._handle_status, Command("status"))
        self.dp.message.register(self._handle_reset, Command("reset"))
        self.dp.message.register(self._handle_message)
        logger.info("Handlers registered")
    
    async def _handle_start(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"User {user_id}: /start command")
        
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ LLM.\n\n"
            "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥.\n"
            "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, —á—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/role <–ø—Ä–æ–º–ø—Ç> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
            "/role default - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/reset - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!"
        )
        
        await message.answer(welcome_text)
    
    async def _handle_help(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"User {user_id}: /help command")
        
        help_text = (
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/role <–ø—Ä–æ–º–ø—Ç> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
            "/role default - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/reset - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n\n"
            "üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!\n"
            "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
        )
        
        await message.answer(help_text)
    
    async def _handle_role(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /role.
        
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        - /role <—Ç–µ–∫—Å—Ç> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å
        - /role default - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id if message.from_user else 0
        logger.info(f"User {user_id}: /role command")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ /role <—Ç–µ–∫—Å—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å\n"
                "‚Ä¢ /role default ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/role –¢—ã –æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ü–æ–º–æ–≥–∞–µ—à—å —Å –∫–æ–¥–æ–º –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."
            )
            return
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
        args = message.text.split(maxsplit=1)
        
        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ /role <—Ç–µ–∫—Å—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å\n"
                "‚Ä¢ /role default ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/role –¢—ã –æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ü–æ–º–æ–≥–∞–µ—à—å —Å –∫–æ–¥–æ–º –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."
            )
            return
        
        role_text = args[1].strip()
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.bot.send_chat_action(
                chat_id=message.chat.id,
                action=ChatAction.TYPING
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º - default –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            if role_text.lower() == "default":
                system_prompt = self.config.system_prompt
                await self.storage.set_system_prompt(user_id, system_prompt)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                prompt_preview = system_prompt[:100]
                if len(system_prompt) > 100:
                    prompt_preview += "..."
                
                await message.answer(
                    "‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
                    "üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
                    "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞\n\n"
                    f"üìù –ù–æ–≤–∞—è —Ä–æ–ª—å:\n{prompt_preview}"
                )
                logger.info(f"User {user_id}: role reset to default")
            else:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                await self.storage.set_system_prompt(user_id, role_text)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                prompt_preview = role_text[:100]
                if len(role_text) > 100:
                    prompt_preview += "..."
                
                await message.answer(
                    "‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
                    "üé≠ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å\n"
                    "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞\n\n"
                    f"üìù –ù–æ–≤–∞—è —Ä–æ–ª—å:\n{prompt_preview}"
                )
                logger.info(f"User {user_id}: custom role set ({len(role_text)} chars)")
            
        except Exception as e:
            logger.error(f"User {user_id}: Failed to set role: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å!\n\n"
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def _handle_status(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status.
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        - –¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        - –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        - –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å LLM
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id if message.from_user else 0
        logger.info(f"User {user_id}: /status command")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.bot.send_chat_action(
                chat_id=message.chat.id,
                action=ChatAction.TYPING
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ
            dialog_info = await self.storage.get_dialog_info(user_id)
            
            messages_count = dialog_info["messages_count"]
            system_prompt = dialog_info["system_prompt"]
            updated_at = dialog_info["updated_at"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            if system_prompt:
                prompt_preview = system_prompt[:100]
                if len(system_prompt) > 100:
                    prompt_preview += "..."
                role_type = "üé≠ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å"
            else:
                prompt_preview = self.config.system_prompt[:100]
                if len(self.config.system_prompt) > 100:
                    prompt_preview += "..."
                role_type = "üîÑ –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if updated_at:
                # –ü–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ
                from datetime import datetime
                dt = datetime.fromisoformat(updated_at)
                updated_str = dt.strftime("%Y-%m-%d %H:%M:%S")
            else:
                updated_str = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            status_text = (
                f"üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞\n\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {messages_count}\n"
                f"üé≠ –¢–∏–ø —Ä–æ–ª–∏: {role_type}\n"
                f"ü§ñ –ú–æ–¥–µ–ª—å: {self.config.openrouter_model}\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_str}\n\n"
                f"üìù –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:\n{prompt_preview}"
            )
            
            await message.answer(status_text)
            logger.info(f"User {user_id}: status sent")
            
        except Exception as e:
            logger.error(f"User {user_id}: Failed to get status: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å!\n\n"
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_reset(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset.
        
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id if message.from_user else 0
        logger.info(f"User {user_id}: /reset command")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.bot.send_chat_action(
                chat_id=message.chat.id,
                action=ChatAction.TYPING
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            custom_prompt = await self.storage.get_system_prompt(user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            if custom_prompt:
                system_prompt = custom_prompt
                role_type = "üé≠ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å"
                role_status = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            else:
                system_prompt = self.config.system_prompt
                role_type = "üîÑ –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                role_status = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –∑–∞–Ω–æ–≤–æ (—ç—Ç–æ –æ—á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é)
            await self.storage.set_system_prompt(user_id, system_prompt)
            
            await message.answer(
                "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!\n\n"
                f"üóëÔ∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã\n"
                f"{role_type} {role_status}\n\n"
                "–ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!"
            )
            logger.info(f"User {user_id}: history reset, role preserved")
            
        except Exception as e:
            logger.error(f"User {user_id}: Failed to reset history: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é!\n\n"
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_message(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ LLM –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.text:
            return
        
        user_id = message.from_user.id if message.from_user else 0
        text_length = len(message.text)
        logger.info(f"User {user_id}: received message ({text_length} chars)")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await self.bot.send_chat_action(
                chat_id=message.chat.id,
                action=ChatAction.TYPING
            )
            
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = await self.storage.load_history(user_id)
            
            # 2. –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            if not history:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º default
                custom_prompt = await self.storage.get_system_prompt(user_id)
                system_prompt = custom_prompt if custom_prompt else self.config.system_prompt
                
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
                history = [{
                    "role": "system",
                    "content": system_prompt,
                    "timestamp": datetime.now().isoformat()
                }]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ Storage –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not custom_prompt:
                    await self.storage.set_system_prompt(user_id, system_prompt)
                
                logger.debug(
                    f"User {user_id}: initialized new dialog with "
                    f"{'custom' if custom_prompt else 'default'} system prompt"
                )
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history.append({
                "role": "user",
                "content": message.text,
                "timestamp": datetime.now().isoformat()
            })
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
            response = await self.llm_client.generate_response(
                messages=history,
                user_id=user_id
            )
            
            # 5. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append({
                "role": "assistant",
                "content": response,
                "timestamp": datetime.now().isoformat()
            })
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            await self.storage.save_history(user_id, history)
            
            # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å —Ä–∞–∑–±–∏–≤–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
            message_parts = self._split_message(response)
            
            if len(message_parts) == 1:
                # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                await message.answer(response)
                logger.debug(f"User {user_id}: response sent ({len(response)} chars)")
            else:
                # –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                logger.info(
                    f"User {user_id}: splitting long response into {len(message_parts)} parts "
                    f"(total {len(response)} chars)"
                )
                
                for i, part in enumerate(message_parts, 1):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
                    if len(message_parts) > 1:
                        part_indicator = f"üìÑ –ß–∞—Å—Ç—å {i}/{len(message_parts)}\n\n"
                        part_with_indicator = part_indicator + part
                    else:
                        part_with_indicator = part
                    
                    await message.answer(part_with_indicator)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    if i < len(message_parts):
                        await asyncio.sleep(0.5)
                
                logger.debug(
                    f"User {user_id}: all {len(message_parts)} parts sent successfully"
                )
            
        except LLMAPIError as e:
            logger.error(f"User {user_id}: LLM API error: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = self._get_error_message(str(e))
            await message.answer(error_message)
            
        except Exception as e:
            logger.error(f"User {user_id}: Unexpected error: {e}", exc_info=True)
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def _split_message(self, text: str, max_length: int = 4096) -> list[str]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤.
        
        –°—Ç–∞—Ä–∞–µ—Ç—Å—è —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –∞–±–∑–∞—Ü–µ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4096)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
        """
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ –ª–∏–º–∏—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(text) <= max_length:
            return [text]
        
        parts = []
        remaining_text = text
        
        while remaining_text:
            # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
            if len(remaining_text) <= max_length:
                parts.append(remaining_text)
                break
            
            # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
            chunk = remaining_text[:max_length]
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ –¥–≤–æ–π–Ω–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É —Å—Ç—Ä–æ–∫–∏ (–∞–±–∑–∞—Ü—ã)
            split_pos = chunk.rfind("\n\n")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ –æ–¥–∏–Ω–∞—Ä–Ω–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É —Å—Ç—Ä–æ–∫–∏
            if split_pos == -1:
                split_pos = chunk.rfind("\n")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ —Ç–æ—á–∫–µ —Å –ø—Ä–æ–±–µ–ª–æ–º (–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            if split_pos == -1:
                split_pos = chunk.rfind(". ")
                if split_pos != -1:
                    split_pos += 1  # –í–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫—É –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ –ª—é–±–æ–º—É –ø—Ä–æ–±–µ–ª—É
            if split_pos == -1:
                split_pos = chunk.rfind(" ")
            
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Ä–µ–∂–µ–º –ø–æ –ª–∏–º–∏—Ç—É (–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π margin)
            if split_pos == -1 or split_pos < max_length * 0.5:
                split_pos = max_length - 100  # –û—Å—Ç–∞–≤–ª—è–µ–º margin –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞—Ç–∫–æ–º
            parts.append(remaining_text[:split_pos].strip())
            remaining_text = remaining_text[split_pos:].strip()
        
        return parts
    
    def _get_error_message(self, error: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        
        Args:
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        error_lower = error.lower()
        
        if "rate limit" in error_lower:
            return "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        elif "timeout" in error_lower:
            return "‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –∫ LLM –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        elif "connection" in error_lower:
            return "üîå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ LLM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        logger.info("Starting bot polling...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Error during polling: {e}", exc_info=True)
            raise
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        logger.info("Stopping bot...")
        await self.bot.session.close()
        logger.info("Bot stopped")

